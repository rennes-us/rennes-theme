/*
 *
 * Product
 *
 * */

/* By default assume full width for each part of the product information.  If
 * there's enough room, we'll drop to half of the container instead for items
 * below the title. */

article[typeof="Product"] {
  display: flex;
  flex-wrap: wrap;
}

/* Figure */
article[typeof="Product"] figure {
  position: relative;
  flex-basis: 100%;
  margin: 0;
  max-width: 600px;
}

figure a.arrow {
  position: absolute;
  color: white;
  /* For an approach to make an outline, see: */
  /* https://stackoverflow.com/a/4269821/4499968 */
  /* h-shadow v-shadow (blur-radius of 0) color; */
  /*text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;*/
  filter: drop-shadow(0 0 2px black);
  text-rendering: optimizeLegibility;
  top: 50%;
  font-size: 180%;
  padding: 10px;
}

figure a.left {
  left: 0;
  transform: rotate(45deg);
}
figure a.right {
  right: 0;
  transform: rotate(225deg);
}
figure a.arrow:hover {
  text-decoration: none;
  filter: drop-shadow(0 0 4px black);
}

/* Description, Title, and Form */
article[typeof="Product"] > div {
  flex-basis: 100%;
  margin: 0;
}

/* ****************
 * If space allows, show figure and other product details side-by-side.
 * ***************/
@media only screen and (min-width: 600px) {
article[typeof="Product"] > figure { flex-basis: 50%; }
article[typeof="Product"] > div { flex-basis: 50%; }
article[typeof="Product"] div[property="description"] p:first-child {
  /* So the text is flush with the top of the figure, if they're
   * side-by-side. */
  margin-top: 0;
}
}

/* Product images */

article[typeof="Product"] figure > a[property="image"] {
  cursor: zoom-in;
}

/* The images in the aside will be side-by-side thumbnails. */
/* Not currently shown on the page; using the left/right arrows instead. */
article[typeof=Product] figure aside {
  display: none;
  /* This will allow the children image links to wrap if necessary, based on
   * the number of children and the value of flex-basis below. */
  flex-wrap: wrap;
  /* For cases where there's extra whitespace (that might only come up when the
   * images hit the max-width below and there's still extra room) this will
   * center them horizontally inside the figure. */
  justify-content: space-around;
}

/* Each separate product thumbnail, wrapped in a link. */
/* Each link will grow and shrink so the whole set of them fits inside the
 * width of the enclosing aside. */
article[typeof="Product"] figure aside a {
  display: block;
  /*flex-basis effectively sets the minimum width, since if the width had to go
   * lower than that to fit everything it'll just wrap to another line
   * instead.*/
  flex-basis: 10%;
  flex-grow: 1;
  flex-shrink: 1;
  /* Since the number of images can vary from product to product, we set a
   * maximum width for the thumbnails for cases of just a few total images. */
  max-width: 50%;
}

/* Restrain the images to the size of the containing link, which is managed by
 * the figure width for the main image and by the aside's flex display for the
 * thumbnails. */
article[typeof="Product"] figure img {
  width: 100%;
}

/* Some margins on the thumbnails, proportional to the aside width */
article[typeof="Product"] figure aside a {
  margin: 1%;
}
article[typeof="Product"] figure aside a:first-child {
  margin-left: 0;
}
article[typeof="Product"] figure aside a:last-child {
  margin-right: 0;
}


/* For when product images are zoomed.
 *
 * The list that normally has the thumbnails will instead expand and overlay
 * the normal page content.  A jQuery handler will add and remove the "zoomed"
 * class.
 * */

article[typeof=Product] figure aside.zoomed {
  background: white;
  display: block;
  height: 100%;
  left: 0;
  overflow: scroll;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 99;
  /* This webkit thing is needed for the expected sort of scrolling behavior in
   * mobile Safari.  Note that this gives both the "momentum-based scrolling"
   * you otherwise get, but also fixes weirdness where elements with lower
   * z-index were inadvertantly getting scrolled instead.  "auto" instead of
   * "touch" still gives the messed-up scrolling behavior.  So touch it is! */
  /* Possibly related:
   *  * https://github.com/scottjehl/Device-Bugs/issues/14
   *  * https://github.com/willmcpo/body-scroll-lock
   *  * https://stackoverflow.com/a/38505679 */
  -webkit-overflow-scrolling: touch;
}

/* In general we allow the zoomed image to be the full available width.  But
 * see below for larger screens. */
article[typeof=Product] figure aside.zoomed a {
  cursor: zoom-out;
  margin: 5px auto;
  max-width: 100%;
}
/* Aiming for one reasonable approach across viewport dimensions for the
 * maximum width in zoom mode, once we're beyond the smallest screens.  100% of
 * the viewport height seems OK. */
@media only screen and (min-width: 600px) {
article[typeof=Product] figure aside.zoomed a {
  max-width: 100vh;
}
}

/*
 *
 * Product - styling
 *
 * */

/* Product description and offer form */
article[typeof=Product] div[property=description] {
  margin: 0 0.5em;
  text-align: justify;
}
form[property=offers] {
  border-bottom: 1px solid black;
  border-top: 1px solid black;
  margin: 0 0.5em;
  text-align: center;
}

small {
  display: block;
  font-size: inherit;
  margin: 0.5em;
}

small.sale-disclaimer {
  font-weight: bold;
  text-decoration: underline;
}

/* Offer form */

form[property=offers] .pick-an-option {
  font-weight: bold;
}

.variants {
  margin: 1em 0;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

/* We hide the radio buttons themselves and style everything with the labels */
form[property=offers] .variants input[type=radio] {
  display: none;
}
form[property=offers] .variants input[type=radio] + label {
  padding: 5px;
  margin: 5px;
  min-width: 2.5em;
  min-height: 2.5em;
  line-height: 2.5em;
  text-transform: lowercase;
  display: block;
}
form[property=offers] .variants input[type=radio]:enabled + label {
  cursor: pointer;
}
form[property=offers] .variants input[type=radio]:disabled + label {
  color: gray;
  cursor: not-allowed;
  text-decoration: line-through;
}

/* Aiming for a simple black circle around a label when checked.  It's a bit
 * tricky since it's an inline element and we don't know for sure how wide the
 * text will be. */
form[property=offers] .variants input[type=radio]:checked + label {
  border-radius: 25em;
  box-shadow: inset 0 0 0 1px #000;
}
