/* Basic page layout and organization */

/*
TODO: template out or automate these things:
  min-width for product in collection
  max-width for product in collection
  fade timing for product hover in collection
  fade colors for product hover in collection
*/

body {
  padding: 10px 20px;
}

/*
 *
 * Header and navigation
 *
 * */


input[type="search"] {
  width: 80%;
  max-width: 30em;
}

/* navigation lists in general */
nav ul {
  list-style-type: none;
  padding-left: 10px;
}

.site-nav ul {
  padding-left: 0;
}

.site-nav li {
  display: inline;
}

/* Fixed heading and navigation links for large screens */
@media only screen and (min-width: 740px) {

body > header {
  position: fixed; /* could use "sticky" but it's pretty new */
  right: 0;
  left: 0;
  margin: 0 20px;
  height: 0;
}

/* Main site title */
h1 {
  margin-top: 10px;
  float: left; /* to be vertically aligned with product nav */
}

/* product navigation on one side */
.product-nav {
  width: 160px;
  margin: 10px;
  float: right;
}

/* site navigation along the top */
.site-nav {
  margin-top: 60px;
}

main {
  /* leave room for header and product-nav */
  margin-right: 180px;
}

}


/*
 *
 * Collections
 *
 * */


/* Align the set of products in the center of this container, with
 * evenly-distributed padding and however many products can fit per row. */
.products {
  display: flex;
  flex-basis: 25%;
  flex-flow: wrap;
  justify-content: space-around;
}

/* An individual product. */
.products [typeof="Product"] {
  /* Margin relative to viewport width.  Effectively sets the minimum spacing
   * between our flexible elements. */
  margin: 1vw;
  vertical-align: top;
  /* Having a flexible width will let the contained product image scale, but
   * only to a reasonable min/max.  Combined with display: flex on the
   * container the layout will handle a wide range of screen sizes. */
  /* Need to account for side-to-side margins */
  width: calc(25% - 2vw);
  min-width: 300px;
  max-width: 512px;
}

/* The product link, wrapping the image. */
.products [typeof="Product"] a {
  display: block;
  background: white;
}

/* The product image. */
.products [typeof="Product"] img {
  display: block;
  width: 100%;
}

/* The pagination, centered at the bottom of the list. */
.products nav {
  width: 100%;
  text-align: center;
}

/* Fancy product-details-on-hover styling */

/* Ideally I could detect with a media query if the user CAN hover, but that's
 * waiting on Media Queries Level 4.  Instead I'll just assume that larger
 * screens come with a real mouse too. */
@media only screen and (min-width: 1200px) {

/* Product header, hidden until hover */
.products [typeof="Product"] header {
  opacity: 0;
  /* Zero height, to overlay on product image */
  height: 0;
  /* z-index only affects positioned elements, not static, and we need to
   * position the zero-height header on top of the image */
  position: relative;
  z-index: 10;
  /* text color, vs background of product's a */
  color: black;
}

/* Product header appears on hover */
.products [typeof="Product"]:hover header {
  opacity: 1;
  transition: opacity .3s ease-in-out;
  -o-transition: opacity .3s ease-in-out;
  -moz-transition: opacity .3s ease-in-out;
  -webkit-transition: opacity .3s ease-in-out;
}

/* Product image fades on hover */
.products [typeof="Product"]:hover img {
  opacity: 0.6;
  transition: opacity .3s ease-in-out;
  -o-transition: opacity .3s ease-in-out;
  -moz-transition: opacity .3s ease-in-out;
  -webkit-transition: opacity .3s ease-in-out;
}

/* Remove the heading's margin for the hovering case */
.products [typeof="Product"] header h2 {
  margin-top: 0;
  padding: 8px;
}
.products [typeof="Product"] header p {
  padding: 8px;
}

}

/*
 *
 * Product page
 *
 * */

/* Product images, all in a set inside a figure. */
article[typeof="Product"] figure {
  /* By default we assume this occupies the full width available on the page
   * with no additional margin. */
  width: 100%;
  min-width: 200px;
  margin: 0;
}

/* The images in the aside will be side-by-side thumbnails. */
article[typeof=Product] figure aside {
  display: flex;
  /* For cases where there's extra whitespace (that might only come up when the
   * images hit the max-width below and there's still extra room) this will
   * center them horizontally inside the figure. */
  justify-content: space-around;
  /* This will allow the children image links to wrap if necessary, based on
   * the number of children and the value of flex-basis below. */
  flex-wrap: wrap;
}

/* Each separate product thumbnail, wrapped in a link. */
/* Each link will grow and shrink so the whole set of them fits inside the
 * width of the enclosing aside. */
article[typeof="Product"] figure aside a {
  display: block;
  flex-grow: 1;
  flex-shrink: 1;
  /* Since the number of images can vary from product to product, we set a
   * maximum width for the thumbnails for cases of just a few total images. */
  max-width: 50%;
  /*flex-basis effectively sets the minimum width, since if the width had to go
   * lower than that to fit everything it'll just wrap to another line
   * instead.*/
  flex-basis: 10%;
  cursor: zoom-in;
}

/* Restrain the images to the size of the containing link, which is managed by
 * the figure width for the main image and by the aside's flex display for the
 * thumbnails. */
article[typeof="Product"] figure img {
  width: 100%;
}

/* Some margins on the thumbnails, proportional to the aside width */
article[typeof="Product"] figure aside a {
  margin: 1%;
}
article[typeof="Product"] figure aside a:first-child {
  margin-left: 0;
}
article[typeof="Product"] figure aside a:last-child {
  margin-right: 0;
}

/* On larger screens, float the figure and description/offer side-by-side,
 * using half the usable space (minus half of the total horizontal margin each)
 * in their container on each side.
 * TODO should I just use flex for this too? */
@media only screen and (min-width: 600px) {

article[typeof="Product"] figure {
  width: calc(50% - 15px);
  float: left;
  /* 10px on right side */
  margin: 0 10px 0 0;
}
/* Product description and cart form */
article[typeof="Product"] div[property="description"] {
  width: calc(50% - 15px);
  margin: 0 10px;
  float: right;
}
article[typeof="Product"] div[property="description"] p:first-child {
  margin-top: 0;
}
article[typeof="Product"] form[property="offers"] {
  margin-left: calc(50% + 10px);
  margin-right: 10px;
  clear: right;
}
}

/* Fade purchase button until variant selected, if there are variants */
/* TODO find a trick to actually disable with a message until one is selected */
form[property=offers] input[type=radio] ~ button {
  opacity: 0.5;
}
form[property=offers] input[type=radio]:checked ~ button {
  opacity: initial;
}

/*
 *
 * Cart page
 *
 * */

form[action="/cart"] table {
/*  width: 100%;*/
  margin-left: auto;
  margin-right: auto;
}

/* Product images won't go beyond 15% of the viewport width or 30% of its
 * height. */
form[action="/cart"] img {
  max-width: 15vw;
  max-height: 30vh;
}

/* On wide enough screens, show to full "Remove" text (rather than just the
 * abbreviation).  TODO remove the X. */
/* Couldn't get this to work: https://stackoverflow.com/a/22054588 */
@media only screen and (min-width: 600px) {
form[action="/cart"] tbody td:last-child a abbr::after {
  content: attr(title);
}
